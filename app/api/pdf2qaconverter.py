import openai
import fitz
import nltk
nltk.download('punkt')
from nltk import tokenize

class PDF2QAConverter:
    """
    This classs contains utility functions for the converter.
    """
    
    @staticmethod
    def get_text_data(pdf_path: str) -> str:
        """
        Function extracts the text from the PDF file.

        Args:
            pdf_path (string): Path of the PDF file saved in the temp
            directory
        
        Returns:
            str: contains the text data
        """
        with fitz.open(pdf_path) as doc:
            text = "".join(page.get_text() for page in doc)
            return text

    
    @staticmethod
    def get_paragraphs(text_data: str) -> list:
        """
        Function to extract the paragraphs from the text data.

        Args:
            text_data (string): extracted text data from the PDF file
        
        Returns:
            list: paragraphs from the text data
        """
        result = tokenize.sent_tokenize(text_data)
        paragraphs = []
        str_paragraph = ""

        for i in range(len(result)):
            sentence = result[i]
            len_para = len(tokenize.word_tokenize(str_paragraph))

            if len_para < 200:
                str_paragraph += ' ' + sentence
            elif len_para >= 200:
                paragraphs.append(str_paragraph)

                str_paragraph = ''
                str_paragraph += ' ' + sentence
            elif i == len(result) - 1:
                paragraphs.append(str_paragraph)
        
        return paragraphs

    # Function to get the response from OpenAI's api
    @staticmethod
    def get_qna_openai(text: str) -> str:
        """
        Function to get the QnA pair as response from OpenAI.

        Args:
            text (string): paragraph from the text data passed as prompt
            to the OpenAI model.
        
        Returns:
            str: QnA pair generated by OpenAI model.
        """
        try:
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt="Generate 2 descriptive questions and answers per paragraph wise: " + text,
                temperature=0.9,
                max_tokens=200,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0
            )
            return response.choices[0].text
        except Exception as err:
            return str(err)

    # Function to split the Question and Answer by removing prefixes before the actual Question and Answers
    @staticmethod
    def remove_qa_prefix(text: str) -> str:
        """
        Function removes any delimiters from the OpenAI response.

        Args:
            text (string): The response from OpenAI.

        Returns:
            str: Clean response.
        """
        delimiters = ['.', '-', ':']
        first_occurrence_index = min(text.find(delimiter) for delimiter in delimiters if text.find(delimiter) != -1)
        return text[first_occurrence_index + 1:].strip()

    # Function to parse Q&A pairs from lines
    @staticmethod
    def parse_qa_pairs(lines: list) -> list:
        """
        Function to extract the QnA from the OpenAI response
        stored in text file.

        Args:
            lines (list): The lines read from the text file.
        
        Returns:
            list: Extracted QnA as pairs.
        """
        pairs = []
        current_q = ''
        current_a = ''

        for line in lines:
            line = line.strip()
            if line.startswith('Q'):
                if current_q:
                    pairs.append((current_q, current_a))
                current_q = line
                current_a = ''
            elif line.startswith('A'):
                current_a += line[:] + '\n'

        if current_q:
            pairs.append((current_q, current_a))

        return pairs